{"ast":null,"code":"var _jsxFileName = \"/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        // Convert response to JSON\n        const notes = await response.json();\n        // update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors \n        console.log(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = note => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = event => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Create a New Note Object\n    const newNote = {\n      id: notes.length + 1,\n      title: title,\n      content: content\n    };\n\n    // Update State with New Note\n    setNotes([newNote, ...notes]);\n\n    // Reset Form Inputs\n    setTitle(\"\");\n    setContent(\"\");\n  };\n\n  // Handle Updating Note\n  const handleUpdateNote = event => {\n    event.preventDefault();\n    if (!selectedNote) {\n      return;\n    }\n    const updatedNote = {\n      id: selectedNote.id,\n      title: title,\n      content: content\n    };\n    const updatedNotesList = notes.map(note => note.id === selectedNote.id ? updatedNote : note);\n\n    // Update states\n    setNotes(updatedNotesList);\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Delete Notes\n\n  const deleteNote = (event, noteId) => {\n    event.stopPropagation();\n    // Filter selected note\n    const updatedNotes = notes.filter(note => note.id !== noteId);\n    setNotes(updatedNotes);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"note-form\",\n    onSubmit: event => selectedNote ? handleUpdateNote(event) : handleAddNote(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    placeholder: \"Title\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: content,\n    onChange: event => setContent(event.target.value),\n    placeholder: \"Content\",\n    rows: 10,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }), selectedNote ?\n  /*#__PURE__*/\n  // Button - Edit\n  React.createElement(\"div\", {\n    className: \"edit-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Cancel\")) :\n  /*#__PURE__*/\n  // Button - Add\n  React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"Add Note\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n    key: note.id,\n    className: \"note-item\",\n    onClick: () => handleNoteClick(note),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => deleteNote(event, note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, \"X\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, note.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, note.content)))));\n};\nexport default App;","map":{"version":3,"names":["useEffect","useState","React","App","notes","setNotes","title","setTitle","content","setContent","selectedNote","setSelectedNote","fetchNotes","response","fetch","json","e","console","log","handleNoteClick","note","handleAddNote","event","preventDefault","newNote","id","length","handleUpdateNote","updatedNote","updatedNotesList","map","handleCancel","deleteNote","noteId","stopPropagation","updatedNotes","filter","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","rows","type","onClick","key"],"sources":["/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx"],"sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n  \n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        // Convert response to JSON\n        const notes: Note[] = await response.json();\n        // update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors \n        console.log(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = (event: React.FormEvent) => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Create a New Note Object\n    const newNote: Note = {\n      id: notes.length + 1,\n      title: title,\n      content: content,\n    };\n\n    // Update State with New Note\n    setNotes([newNote, ...notes]);\n\n    // Reset Form Inputs\n    setTitle(\"\");\n    setContent(\"\");\n  };\n\n  // Handle Updating Note\n  const handleUpdateNote = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!selectedNote) {\n      return;\n    }\n\n    const updatedNote: Note = {\n      id: selectedNote.id,\n      title: title,\n      content: content,\n    };\n\n    const updatedNotesList = notes.map((note) =>\n      note.id === selectedNote.id ? updatedNote : note\n    );\n\n    // Update states\n    setNotes(updatedNotesList);\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Delete Notes\n\n  const deleteNote = (event: React.MouseEvent, noteId: number) => {\n    event.stopPropagation();\n    // Filter selected note\n    const updatedNotes = notes.filter((note) => note.id !== noteId);\n\n    setNotes(updatedNotes);\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Form */}\n      <form\n        className=\"note-form\"\n        onSubmit={(event) =>\n          selectedNote ? handleUpdateNote(event) : handleAddNote(event)\n        }\n      >\n        {/* Title Input Field */}\n        <input\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          placeholder=\"Title\"\n          required\n        ></input>\n\n        {/* Content Input Field */}\n        <textarea\n          value={content}\n          onChange={(event) => setContent(event.target.value)}\n          placeholder=\"Content\"\n          rows={10}\n          required\n        />\n\n        {/* Display Button based on whether a note is selected for editing */}\n        {selectedNote ? (\n          // Button - Edit\n          <div className=\"edit-buttons\">\n            <button type=\"submit\">Save</button>\n            <button onClick={handleCancel}>Cancel</button>\n          </div>\n        ) : (\n          // Button - Add\n          <button type=\"submit\">Add Note</button>\n        )}\n      </form>\n\n      {/* Notes Grid*/}\n      <div className=\"notes-grid\">\n        {notes.map((note) => (\n          <div\n            key={note.id}\n            className=\"note-item\"\n            onClick={() => handleNoteClick(note)}\n          >\n            {/* Individual Note */}\n            <div className=\"notes-header\">\n              {/* Detele note button */}\n              <button onClick={(event) => deleteNote(event, note.id)}>X</button>\n            </div>\n\n            <h2>{note.title}</h2>\n            <p>{note.content}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
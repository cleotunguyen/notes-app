{"ast":null,"code":"var _jsxFileName = \"/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = note => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Add Note (Form Submission)\n  const handleAddNote = async event => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // // Create a New Note Object on the frontend (remove after fetching API)\n    // const newNote: Note = {\n    //   id: notes.length + 1,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // // Move state function calls inside \"try-catch\" block after API fetching\n  //   // Update State with New Note\n  //   setNotes([newNote, ...notes]);\n\n  //   // Reset Form Inputs\n  //   setTitle(\"\");\n  //   setContent(\"\");\n  // };\n\n  // Handle Updating Note\n\n  const handleUpdateNote = async event => {\n    // Prevent form from automatically submitting when clicking save button\n    event.preventDefault();\n    if (!selectedNote) {\n      return;\n    }\n\n    // // Move after fetching API\n    // const updatedNote: Note = {\n    //   id: selectedNote.id,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Replace selected notes with updated notes that match id\n    // const updatedNotesList = notes.map((note) =>\n    //   note.id === selectedNote.id ? updatedNote : note\n    // );\n\n    // Update the notes in the database by calling API\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${selectedNote.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n      const updatedNote = await response.json();\n      const updatedNotesList = notes.map(note => note.id === selectedNote.id ? updatedNote : note);\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(\"Fail to update note:\", e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle Deleting Notes\n  const deleteNote = async (event, noteId) => {\n    event.stopPropagation();\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter(note => note.id !== noteId);\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // OPTIONAL: Handle returning to home page after selecting a note\n  const handleReturnToHome = () => {\n    setSelectedNote(null);\n    setTitle(\"\");\n    setContent(\"\");\n  };\n  return (\n    /*#__PURE__*/\n    //  -- Start app-container\n    React.createElement(\"div\", {\n      className: \"app-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"editNoteContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }\n    }, selectedNote && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleReturnToHome,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"note-form\",\n      onSubmit: event => selectedNote ? handleUpdateNote(event) : handleAddNote(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: title,\n      onChange: event => setTitle(event.target.value),\n      placeholder: \"Title\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      value: content,\n      onChange: event => setContent(event.target.value),\n      placeholder: \"Content\",\n      rows: 10,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }), selectedNote ?\n    /*#__PURE__*/\n    // Edit Buttons\n    React.createElement(\"div\", {\n      className: \"edit-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 15\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }\n    }, \"Cancel\")) :\n    /*#__PURE__*/\n    // Add Button\n    React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }, \"Add Note\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notes-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }\n    }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n      key: note.id,\n      className: \"note-item\",\n      onClick: () => handleNoteClick(note),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notes-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => deleteNote(event, note.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }, \"x\")), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, note.title), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, note.content)))))\n    // End app-container\n  );\n};\nexport default App;","map":{"version":3,"names":["useEffect","useState","React","App","notes","setNotes","title","setTitle","content","setContent","selectedNote","setSelectedNote","fetchNotes","response","fetch","ok","Error","json","e","console","error","handleNoteClick","note","handleAddNote","event","preventDefault","method","headers","body","JSON","stringify","newNote","handleUpdateNote","id","updatedNote","updatedNotesList","map","handleCancel","deleteNote","noteId","stopPropagation","updatedNotes","filter","handleReturnToHome","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","value","onChange","target","placeholder","required","rows","type","key"],"sources":["/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx"],"sourcesContent":["import \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport React from \"react\";\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n\n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes: Note[] = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Add Note (Form Submission)\n  const handleAddNote = async (event: React.FormEvent) => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // // Create a New Note Object on the frontend (remove after fetching API)\n    // const newNote: Note = {\n    //   id: notes.length + 1,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title,\n          content,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // // Move state function calls inside \"try-catch\" block after API fetching\n  //   // Update State with New Note\n  //   setNotes([newNote, ...notes]);\n\n  //   // Reset Form Inputs\n  //   setTitle(\"\");\n  //   setContent(\"\");\n  // };\n\n  // Handle Updating Note\n\n  const handleUpdateNote = async (event: React.FormEvent) => {\n    // Prevent form from automatically submitting when clicking save button\n    event.preventDefault();\n\n    if (!selectedNote) {\n      return;\n    }\n\n    // // Move after fetching API\n    // const updatedNote: Note = {\n    //   id: selectedNote.id,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Replace selected notes with updated notes that match id\n    // const updatedNotesList = notes.map((note) =>\n    //   note.id === selectedNote.id ? updatedNote : note\n    // );\n\n    // Update the notes in the database by calling API\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${selectedNote.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            title,\n            content,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n\n      const updatedNote = await response.json();\n\n      const updatedNotesList = notes.map((note) =>\n        note.id === selectedNote.id ? updatedNote : note\n      );\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(\"Fail to update note:\", e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle Deleting Notes\n  const deleteNote = async (event: React.MouseEvent, noteId: number) => {\n    event.stopPropagation();\n\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${noteId}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter((note) => note.id !== noteId);\n\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // OPTIONAL: Handle returning to home page after selecting a note\n  const handleReturnToHome = () => {\n    setSelectedNote(null);\n    setTitle(\"\");\n    setContent(\"\");\n  };\n\n  return (\n    //  -- Start app-container\n    <div className=\"app-container\">\n      <div className=\"editNoteContainer\">\n        {/* Back Button */}\n        {selectedNote && (\n          <div className=\"back-button\">\n            <button onClick={handleReturnToHome}>\n            </button>\n          </div>\n        )}\n\n        {/* Start Form */}\n        <form\n          className=\"note-form\"\n          onSubmit={(event) =>\n            selectedNote ? handleUpdateNote(event) : handleAddNote(event)\n          }\n        >\n          {/* Title Input Field */}\n          <input\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n            placeholder=\"Title\"\n            required\n          ></input>\n          {/* Content Input Field */}\n          <textarea\n            value={content}\n            onChange={(event) => setContent(event.target.value)}\n            placeholder=\"Content\"\n            rows={10}\n            required\n          />\n          {/* Display Button based on whether a note is selected for editing */}\n          {selectedNote ? (\n            // Edit Buttons\n            <div className=\"edit-buttons\">\n              {/* Save Button */}\n              <button type=\"submit\">Save</button>\n              {/* Cancel Button */}\n              <button onClick={handleCancel}>Cancel</button>\n            </div>\n          ) : (\n            // Add Button\n            <button type=\"submit\">Add Note</button>\n          )}\n        </form>\n        {/* End Form */}\n      </div>\n\n      {/* Start notes-grid */}\n      <div className=\"notes-grid\">\n        {notes.map((note) => (\n          <div\n            key={note.id}\n            className=\"note-item\"\n            onClick={() => handleNoteClick(note)}\n          >\n            {/* Individual Note */}\n            <div className=\"notes-header\">\n              {/* Delete note button */}\n              <button onClick={(event) => deleteNote(event, note.id)}>x</button>\n            </div>\n\n            <h2>{note.title}</h2>\n            <p>{note.content}</p>\n          </div>\n        ))}\n      </div>\n      {/* End notes-grid */}\n    </div>\n    // End app-container\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
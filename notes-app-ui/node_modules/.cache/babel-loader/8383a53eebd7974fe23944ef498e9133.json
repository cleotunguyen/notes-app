{"ast":null,"code":"var _jsxFileName = \"/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = note => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = async event => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // Handle Updating Note\n  const handleUpdateNote = async event => {\n    event.preventDefault();\n    if (!selectedNote) {\n      return;\n    }\n    const updatedNote = {\n      id: selectedNote.id,\n      title: title,\n      content: content\n    };\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${selectedNote.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedNote)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n      const updatedNotesList = notes.map(note => note.id === selectedNote.id ? updatedNote : note);\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Delete Notes\n  const deleteNote = async (event, noteId) => {\n    event.stopPropagation();\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter(note => note.id !== noteId);\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"note-form\",\n    onSubmit: event => selectedNote ? handleUpdateNote(event) : handleAddNote(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    placeholder: \"Title\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: content,\n    onChange: event => setContent(event.target.value),\n    placeholder: \"Content\",\n    rows: 10,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }), selectedNote ?\n  /*#__PURE__*/\n  // Button - Edit\n  React.createElement(\"div\", {\n    className: \"edit-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, \"Cancel\")) :\n  /*#__PURE__*/\n  // Button - Add\n  React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, \"Add Note\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }\n  }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n    key: note.id,\n    className: \"note-item\",\n    onClick: () => handleNoteClick(note),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => deleteNote(event, note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, \"X\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }\n  }, note.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, note.content)))));\n};\nexport default App;","map":{"version":3,"names":["useEffect","useState","React","App","notes","setNotes","title","setTitle","content","setContent","selectedNote","setSelectedNote","fetchNotes","response","fetch","ok","Error","json","e","console","error","handleNoteClick","note","handleAddNote","event","preventDefault","method","headers","body","JSON","stringify","newNote","handleUpdateNote","updatedNote","id","updatedNotesList","map","handleCancel","deleteNote","noteId","stopPropagation","updatedNotes","filter","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","rows","type","onClick","key"],"sources":["/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx"],"sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes: Note[] = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = async (event: React.FormEvent) => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title,\n          content,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // Handle Updating Note\n  const handleUpdateNote = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!selectedNote) {\n      return;\n    }\n\n    const updatedNote: Note = {\n      id: selectedNote.id,\n      title: title,\n      content: content,\n    };\n\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${selectedNote.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(updatedNote),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n      const updatedNotesList = notes.map((note) =>\n        note.id === selectedNote.id ? updatedNote : note\n      );\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Delete Notes\n  const deleteNote = async (event: React.MouseEvent, noteId: number) => {\n    event.stopPropagation();\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${noteId}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter((note) => note.id !== noteId);\n\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Form */}\n      <form\n        className=\"note-form\"\n        onSubmit={(event) =>\n          selectedNote ? handleUpdateNote(event) : handleAddNote(event)\n        }\n      >\n        {/* Title Input Field */}\n        <input\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          placeholder=\"Title\"\n          required\n        ></input>\n\n        {/* Content Input Field */}\n        <textarea\n          value={content}\n          onChange={(event) => setContent(event.target.value)}\n          placeholder=\"Content\"\n          rows={10}\n          required\n        />\n\n        {/* Display Button based on whether a note is selected for editing */}\n        {selectedNote ? (\n          // Button - Edit\n          <div className=\"edit-buttons\">\n            <button type=\"submit\">Save</button>\n            <button onClick={handleCancel}>Cancel</button>\n          </div>\n        ) : (\n          // Button - Add\n          <button type=\"submit\">Add Note</button>\n        )}\n      </form>\n\n      {/* Notes Grid*/}\n      <div className=\"notes-grid\">\n        {notes.map((note) => (\n          <div\n            key={note.id}\n            className=\"note-item\"\n            onClick={() => handleNoteClick(note)}\n          >\n            {/* Individual Note */}\n            <div className=\"notes-header\">\n              {/* Delete note button */}\n              <button onClick={(event) => deleteNote(event, note.id)}>X</button>\n            </div>\n\n            <h2>{note.title}</h2>\n            <p>{note.content}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
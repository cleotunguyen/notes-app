{"ast":null,"code":"var _jsxFileName = \"/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport React from \"react\";\nconst App = () => {\n  const [notes, setNotes] = useState([\n  // Create Dummy Notes\n  {\n    id: 1,\n    title: \"Test note 1\",\n    content: \"note content placeholder\"\n  }, {\n    id: 2,\n    title: \"Test note 2 \",\n    content: \"note content placeholder\"\n  }, {\n    id: 3,\n    title: \"Test note 3\",\n    content: \"note content placeholder\"\n  }, {\n    id: 4,\n    title: \"Test note 4 \",\n    content: \"note content placeholder\"\n  }, {\n    id: 5,\n    title: \"Test note 5\",\n    content: \"note content placeholder\"\n  }, {\n    id: 6,\n    title: \"Test note 6\",\n    content: \"note content placeholder\"\n  }, {\n    id: 7,\n    title: \"Test note 7\",\n    content: \"note content placeholder\"\n  }, {\n    id: 8,\n    title: \"Test note 8\",\n    content: \"note content placeholder\"\n  }]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // Handle clicking on a note\n  const handleNoteClick = note => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = event => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Create a New Note Object\n    const newNote = {\n      id: notes.length + 1,\n      title: title,\n      content: content\n    };\n\n    // Update State with New Note\n    setNotes([newNote, ...notes]);\n\n    // Reset Form Inputs\n    setTitle(\"\");\n    setContent(\"\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"note-form\",\n    onSubmit: handleAddNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    placeholder: \"Title\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: content,\n    onChange: event => setContent(event.target.value),\n    placeholder: \"Content\",\n    rows: 10,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Add Note\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n    key: note.id,\n    className: \"note-item\",\n    onClick: () => handleNoteClick(note),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"x\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, note.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, note.content)))));\n};\nexport default App;","map":{"version":3,"names":["useState","React","App","notes","setNotes","id","title","content","setTitle","setContent","selectedNote","setSelectedNote","handleNoteClick","note","handleAddNote","event","preventDefault","newNote","length","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","rows","type","map","key","onClick"],"sources":["/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport React from \"react\";\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([\n    // Create Dummy Notes\n    {\n      id: 1,\n      title: \"Test note 1\",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 2,\n      title: \"Test note 2 \",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 3,\n      title: \"Test note 3\",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 4,\n      title: \"Test note 4 \",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 5,\n      title: \"Test note 5\",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 6,\n      title: \"Test note 6\",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 7,\n      title: \"Test note 7\",\n      content: \"note content placeholder\",\n    },\n    {\n      id: 8,\n      title: \"Test note 8\",\n      content: \"note content placeholder\",\n    },\n  ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  // Handle clicking on a note\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n  };\n\n  // Handle Form Submission\n  const handleAddNote = (event: React.FormEvent) => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // Create a New Note Object\n    const newNote: Note = {\n      id: notes.length + 1,\n      title: title,\n      content: content,\n    };\n\n    // Update State with New Note\n    setNotes([newNote, ...notes]);\n\n    // Reset Form Inputs\n    setTitle(\"\");\n    setContent(\"\");\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Form */}\n      <form className=\"note-form\" onSubmit={handleAddNote}>\n        {/* Title Input Field */}\n        <input\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          placeholder=\"Title\"\n          required\n        ></input>\n\n        {/* Content Input Field */}\n        <textarea\n          value={content}\n          onChange={(event) => setContent(event.target.value)}\n          placeholder=\"Content\"\n          rows={10}\n          required\n        />\n        <button type=\"submit\">Add Note</button>\n      </form>\n\n      {/* Notes Grid*/}\n      <div className=\"notes-grid\">\n        {notes.map((note) => (\n          <div\n            key={note.id}\n            className=\"note-item\"\n            onClick={() => handleNoteClick(note)}\n          >\n            <div className=\"notes-header\">\n              <button>x</button>\n            </div>\n            <h2>{note.title}</h2>\n            <p>{note.content}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAQzB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAS;EACzC;EACA;IACEK,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,cAAc;IACrBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,cAAc;IACrBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,OAAO,EAAE;EACX,CAAC,CACF,CAAC;;EAEF;EACA,MAAM,CAACD,KAAK,EAAEE,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEE,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAc,IAAI,CAAC;;EAEnE;EACA,MAAMY,eAAe,GAAIC,IAAU,IAAK;IACtCF,eAAe,CAACE,IAAI,CAAC;IACrBL,QAAQ,CAACK,IAAI,CAACP,KAAK,CAAC;IACpBG,UAAU,CAACI,IAAI,CAACN,OAAO,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMO,aAAa,GAAIC,KAAsB,IAAK;IAChD;IACAA,KAAK,CAACC,cAAc,CAAC,CAAC;;IAEtB;IACA,MAAMC,OAAa,GAAG;MACpBZ,EAAE,EAAEF,KAAK,CAACe,MAAM,GAAG,CAAC;MACpBZ,KAAK,EAAEA,KAAK;MACZC,OAAO,EAAEA;IACX,CAAC;;IAED;IACAH,QAAQ,CAAC,CAACa,OAAO,EAAE,GAAGd,KAAK,CAAC,CAAC;;IAE7B;IACAK,QAAQ,CAAC,EAAE,CAAC;IACZC,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACER,KAAA,CAAAkB,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE5BzB,KAAA,CAAAkB,aAAA;IAAMC,SAAS,EAAC,WAAW;IAACO,QAAQ,EAAEb,aAAc;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAElDzB,KAAA,CAAAkB,aAAA;IACES,KAAK,EAAEtB,KAAM;IACbuB,QAAQ,EAAGd,KAAK,IAAKP,QAAQ,CAACO,KAAK,CAACe,MAAM,CAACF,KAAK,CAAE;IAClDG,WAAW,EAAC,OAAO;IACnBC,QAAQ;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACF,CAAC,eAGTzB,KAAA,CAAAkB,aAAA;IACES,KAAK,EAAErB,OAAQ;IACfsB,QAAQ,EAAGd,KAAK,IAAKN,UAAU,CAACM,KAAK,CAACe,MAAM,CAACF,KAAK,CAAE;IACpDG,WAAW,EAAC,SAAS;IACrBE,IAAI,EAAE,EAAG;IACTD,QAAQ;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACT,CAAC,eACFzB,KAAA,CAAAkB,aAAA;IAAQe,IAAI,EAAC,QAAQ;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAgB,CAClC,CAAC,eAGPzB,KAAA,CAAAkB,aAAA;IAAKC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACxBvB,KAAK,CAACgC,GAAG,CAAEtB,IAAI,iBACdZ,KAAA,CAAAkB,aAAA;IACEiB,GAAG,EAAEvB,IAAI,CAACR,EAAG;IACbe,SAAS,EAAC,WAAW;IACrBiB,OAAO,EAAEA,CAAA,KAAMzB,eAAe,CAACC,IAAI,CAAE;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAErCzB,KAAA,CAAAkB,aAAA;IAAKC,SAAS,EAAC,cAAc;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3BzB,KAAA,CAAAkB,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAQ,GAAS,CACd,CAAC,eACNzB,KAAA,CAAAkB,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKb,IAAI,CAACP,KAAU,CAAC,eACrBL,KAAA,CAAAkB,aAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIb,IAAI,CAACN,OAAW,CACjB,CACN,CACE,CACF,CAAC;AAEV,CAAC;AAED,eAAeL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}
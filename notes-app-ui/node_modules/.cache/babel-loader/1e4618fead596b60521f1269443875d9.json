{"ast":null,"code":"var _jsxFileName = \"/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx\";\nimport \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport React from \"react\";\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n\n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState(null);\n\n  // OPTIONAL: Add an event listener to detect clicks outside of the selected note\n  // Use useRef to create a wrapper for the notes grid container\n  const notesContainerRef = useRef(null);\n  // OPTIONAL: Set a Timeout to automatically deselect the note after a specified time\n  const inactivityTimeoutRef = useRef(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = note => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n\n    // OPTIONAL: Reset the inactivity timeout when a note is clicked\n    resetInactivityTimeout();\n  };\n  const resetInactivityTimeout = () => {\n    // Clear any existing timeout\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    // Set a new timeout to deselect the note after 5 seconds of inactivity\n    inactivityTimeoutRef.current = setTimeout(() => {\n      setSelectedNote(null);\n      setTitle(\"\");\n      setContent(\"\");\n    }, 5000); // Adjust the time (5000 ms = 5 seconds) as needed\n  };\n\n  // Handle Add Note (Form Submission)\n  const handleAddNote = async event => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // // Create a New Note Object on the frontend (remove after fetching API)\n    // const newNote: Note = {\n    //   id: notes.length + 1,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // // Move state function calls inside \"try-catch\" block after API fetching\n  //   // Update State with New Note\n  //   setNotes([newNote, ...notes]);\n\n  //   // Reset Form Inputs\n  //   setTitle(\"\");\n  //   setContent(\"\");\n  // };\n\n  // Handle Updating Note\n\n  const handleUpdateNote = async event => {\n    // Prevent form from automatically submitting when clicking save button\n    event.preventDefault();\n    if (!selectedNote) {\n      return;\n    }\n\n    // // Move after fetching API\n    // const updatedNote: Note = {\n    //   id: selectedNote.id,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Replace selected notes with updated notes that match id\n    // const updatedNotesList = notes.map((note) =>\n    //   note.id === selectedNote.id ? updatedNote : note\n    // );\n\n    // Update the notes in the database by calling API\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${selectedNote.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n      const updatedNote = await response.json();\n      const updatedNotesList = notes.map(note => note.id === selectedNote.id ? updatedNote : note);\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(\"Fail to update note:\", e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle Deleting Notes\n  const deleteNote = async (event, noteId) => {\n    event.stopPropagation();\n    try {\n      const response = await fetch(`http://localhost:5000/api/notes/${noteId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter(note => note.id !== noteId);\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"note-form\",\n    onSubmit: event => selectedNote ? handleUpdateNote(event) : handleAddNote(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: title,\n    onChange: event => setTitle(event.target.value),\n    placeholder: \"Title\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: content,\n    onChange: event => setContent(event.target.value),\n    placeholder: \"Content\",\n    rows: 10,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }), selectedNote ?\n  /*#__PURE__*/\n  // Button - Edit\n  React.createElement(\"div\", {\n    className: \"edit-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, \"Cancel\")) :\n  /*#__PURE__*/\n  // Button - Add\n  React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, \"Add Note\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }\n  }, notes.map(note => /*#__PURE__*/React.createElement(\"div\", {\n    key: note.id,\n    className: \"note-item\",\n    onClick: () => handleNoteClick(note),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => deleteNote(event, note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, \"X\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }, note.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, note.content)))));\n};\nexport default App;","map":{"version":3,"names":["useEffect","useRef","useState","React","App","notes","setNotes","title","setTitle","content","setContent","selectedNote","setSelectedNote","notesContainerRef","inactivityTimeoutRef","fetchNotes","response","fetch","ok","Error","json","e","console","error","handleNoteClick","note","resetInactivityTimeout","current","clearTimeout","setTimeout","handleAddNote","event","preventDefault","method","headers","body","JSON","stringify","newNote","handleUpdateNote","id","updatedNote","updatedNotesList","map","handleCancel","deleteNote","noteId","stopPropagation","updatedNotes","filter","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","rows","type","onClick","key"],"sources":["/Users/cleo/Desktop/notes-app/notes-app-ui/src/App.tsx"],"sourcesContent":["import \"./App.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport React from \"react\";\n\ntype Note = {\n  id: number;\n  title: string;\n  content: string;\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n\n  //   // Create Dummy Notes (remove after fetching from API)\n  //   {\n  //     id: 1,\n  //     title: \"Test note 1\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"Test note 2 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"Test note 3\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"Test note 4 \",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 5,\n  //     title: \"Test note 5\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 6,\n  //     title: \"Test note 6\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 7,\n  //     title: \"Test note 7\",\n  //     content: \"note content placeholder\",\n  //   },\n  //   {\n  //     id: 8,\n  //     title: \"Test note 8\",\n  //     content: \"note content placeholder\",\n  //   },\n  // ]);\n\n  // State for Form Inputs\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  // Track selected note\n  const [selectedNote, setSelectedNote] = useState<Note | null>(null);\n\n  // OPTIONAL: Add an event listener to detect clicks outside of the selected note\n  // Use useRef to create a wrapper for the notes grid container\n  const notesContainerRef = useRef<HTMLDivElement>(null);\n  // OPTIONAL: Set a Timeout to automatically deselect the note after a specified time\n  const inactivityTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Get and Display Notes with useEffect hook\n  useEffect(() => {\n    const fetchNotes = async () => {\n      // Handle errors from API\n      try {\n        // Use fetch function to call API\n        const response = await fetch(\"http://localhost:5000/api/notes\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch notes\");\n        }\n        // Convert response to JSON\n        const notes: Note[] = await response.json();\n        // Update state with notes fetched from API\n        setNotes(notes);\n      } catch (e) {\n        // Log errors\n        console.error(e);\n      }\n    };\n    // Call fetchNotes\n    fetchNotes();\n    // Add empty dependency array so the code inside useEffect hook only runs ONCE on mount\n  }, []);\n\n  // Handle Clicking on a note\n  const handleNoteClick = (note: Note) => {\n    setSelectedNote(note);\n    setTitle(note.title);\n    setContent(note.content);\n\n    // OPTIONAL: Reset the inactivity timeout when a note is clicked\n    resetInactivityTimeout();\n  };\n\n  const resetInactivityTimeout = () => {\n    // Clear any existing timeout\n    if (inactivityTimeoutRef.current) {\n      clearTimeout(inactivityTimeoutRef.current);\n    }\n\n    // Set a new timeout to deselect the note after 5 seconds of inactivity\n    inactivityTimeoutRef.current = setTimeout(() => {\n      setSelectedNote(null);\n      setTitle(\"\");\n      setContent(\"\");\n    }, 5000); // Adjust the time (5000 ms = 5 seconds) as needed\n  };\n\n  // Handle Add Note (Form Submission)\n  const handleAddNote = async (event: React.FormEvent) => {\n    // Prevent form from submitting and refreshing page\n    event.preventDefault();\n\n    // // Create a New Note Object on the frontend (remove after fetching API)\n    // const newNote: Note = {\n    //   id: notes.length + 1,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Handle API error\n    try {\n      // Call API\n      const response = await fetch(\"http://localhost:5000/api/notes\", {\n        method: \"POST\",\n        // Add header to request\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title,\n          content,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add note\");\n      }\n      // Convert response to JSON and store in newNote\n      const newNote = await response.json();\n\n      setNotes([newNote, ...notes]);\n      setTitle(\"\");\n      setContent(\"\");\n    } catch (e) {\n      // Log errors\n      console.error(e);\n    }\n  };\n\n  // // Move state function calls inside \"try-catch\" block after API fetching\n  //   // Update State with New Note\n  //   setNotes([newNote, ...notes]);\n\n  //   // Reset Form Inputs\n  //   setTitle(\"\");\n  //   setContent(\"\");\n  // };\n\n  // Handle Updating Note\n\n  const handleUpdateNote = async (event: React.FormEvent) => {\n    // Prevent form from automatically submitting when clicking save button\n    event.preventDefault();\n\n    if (!selectedNote) {\n      return;\n    }\n\n    // // Move after fetching API\n    // const updatedNote: Note = {\n    //   id: selectedNote.id,\n    //   title: title,\n    //   content: content,\n    // };\n\n    // Replace selected notes with updated notes that match id\n    // const updatedNotesList = notes.map((note) =>\n    //   note.id === selectedNote.id ? updatedNote : note\n    // );\n\n    // Update the notes in the database by calling API\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${selectedNote.id}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            title,\n            content,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update note\");\n      }\n\n      const updatedNote = await response.json();\n\n      const updatedNotesList = notes.map((note) =>\n        note.id === selectedNote.id ? updatedNote : note\n      );\n\n      // Update states\n      setNotes(updatedNotesList);\n      setTitle(\"\");\n      setContent(\"\");\n      setSelectedNote(null);\n    } catch (e) {\n      console.error(\"Fail to update note:\", e);\n    }\n  };\n\n  // Handle user canceling the update (reset the form)\n  const handleCancel = () => {\n    setTitle(\"\");\n    setContent(\"\");\n    setSelectedNote(null);\n  };\n\n  // Handle Deleting Notes\n  const deleteNote = async (event: React.MouseEvent, noteId: number) => {\n    event.stopPropagation();\n\n    try {\n      const response = await fetch(\n        `http://localhost:5000/api/notes/${noteId}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to delete note\");\n      }\n      // Filter selected note\n      const updatedNotes = notes.filter((note) => note.id !== noteId);\n\n      setNotes(updatedNotes);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Form */}\n      <form\n        className=\"note-form\"\n        onSubmit={(event) =>\n          selectedNote ? handleUpdateNote(event) : handleAddNote(event)\n        }\n      >\n        {/* Title Input Field */}\n        <input\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          placeholder=\"Title\"\n          required\n        ></input>\n\n        {/* Content Input Field */}\n        <textarea\n          value={content}\n          onChange={(event) => setContent(event.target.value)}\n          placeholder=\"Content\"\n          rows={10}\n          required\n        />\n\n        {/* Display Button based on whether a note is selected for editing */}\n        {selectedNote ? (\n          // Button - Edit\n          <div className=\"edit-buttons\">\n            <button type=\"submit\">Save</button>\n            <button onClick={handleCancel}>Cancel</button>\n          </div>\n        ) : (\n          // Button - Add\n          <button type=\"submit\">Add Note</button>\n        )}\n      </form>\n\n      {/* Notes Grid*/}\n      <div className=\"notes-grid\">\n        {notes.map((note) => (\n          <div\n            key={note.id}\n            className=\"note-item\"\n            onClick={() => handleNoteClick(note)}\n          >\n            {/* Individual Note */}\n            <div className=\"notes-header\">\n              {/* Delete note button */}\n              <button onClick={(event) => deleteNote(event, note.id)}>X</button>\n            </div>\n\n            <h2>{note.title}</h2>\n            <p>{note.content}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}